// vite.main.config.mjs
import { defineConfig, mergeConfig } from "file:///D:/01-dev/03-side_proyects/password-manager/node_modules/vite/dist/node/index.js";

// vite.base.config.mjs
import { builtinModules } from "node:module";

// package.json
var package_default = {
  name: "password-manager",
  productName: "password-manager",
  version: "1.0.0",
  description: "My Electron application description",
  main: ".vite/build/main.js",
  scripts: {
    start: "electron-forge start",
    package: "electron-forge package",
    make: "electron-forge make",
    publish: "electron-forge publish",
    lint: 'echo "No linting configured"'
  },
  devDependencies: {
    "@electron-forge/cli": "^7.4.0",
    "@electron-forge/maker-deb": "^7.4.0",
    "@electron-forge/maker-rpm": "^7.4.0",
    "@electron-forge/maker-squirrel": "^7.4.0",
    "@electron-forge/maker-zip": "^7.4.0",
    "@electron-forge/plugin-auto-unpack-natives": "^7.4.0",
    "@electron-forge/plugin-fuses": "^7.4.0",
    "@electron-forge/plugin-vite": "^7.4.0",
    "@electron/fuses": "^1.8.0",
    "@vitejs/plugin-vue": "^5.0.5",
    electron: "31.1.0",
    vite: "^5.0.12"
  },
  keywords: [],
  author: {
    name: "AbelAlejandroDev",
    email: "pyschofaint@gmail.com"
  },
  license: "MIT",
  dependencies: {
    "electron-squirrel-startup": "^1.0.1",
    vue: "^3.4.31"
  }
};

// vite.base.config.mjs
var builtins = [
  "electron",
  ...builtinModules.map((m) => [m, `node:${m}`]).flat()
];
var external = [...builtins, ...Object.keys(package_default.dependencies || {})];
var getBuildConfig = (env) => {
  const { root, mode, command } = env;
  return {
    root,
    mode,
    build: {
      // Prevent multiple builds from interfering with each other.
      emptyOutDir: false,
      // ðŸš§ Multiple builds may conflict.
      outDir: ".vite/build",
      watch: command === "serve" ? {} : null,
      minify: command === "build"
    },
    clearScreen: false
  };
};
var getDefineKeys = (names) => {
  const define = {};
  return names.reduce((acc, name) => {
    const NAME = name.toUpperCase();
    const keys = {
      VITE_DEV_SERVER_URL: `${NAME}_VITE_DEV_SERVER_URL`,
      VITE_NAME: `${NAME}_VITE_NAME`
    };
    return { ...acc, [name]: keys };
  }, define);
};
var getBuildDefine = (env) => {
  const { command, forgeConfig } = env;
  const names = forgeConfig.renderer.filter(({ name }) => name != null).map(({ name }) => name);
  const defineKeys = getDefineKeys(names);
  const define = Object.entries(defineKeys).reduce((acc, [name, keys]) => {
    const { VITE_DEV_SERVER_URL, VITE_NAME } = keys;
    const def = {
      [VITE_DEV_SERVER_URL]: command === "serve" ? JSON.stringify(process.env[VITE_DEV_SERVER_URL]) : void 0,
      [VITE_NAME]: JSON.stringify(name)
    };
    return { ...acc, ...def };
  }, {});
  return define;
};
var pluginHotRestart = (command) => {
  return {
    name: "@electron-forge/plugin-vite:hot-restart",
    closeBundle() {
      if (command === "reload") {
        for (const server of Object.values(process.viteDevServers)) {
          server.ws.send({ type: "full-reload" });
        }
      } else {
        process.stdin.emit("data", "rs");
      }
    }
  };
};

// vite.main.config.mjs
import vue from "file:///D:/01-dev/03-side_proyects/password-manager/node_modules/@vitejs/plugin-vue/dist/index.mjs";
var vite_main_config_default = defineConfig((env) => {
  const forgeEnv = env;
  const { forgeConfigSelf } = forgeEnv;
  const define = getBuildDefine(forgeEnv);
  const config = {
    build: {
      lib: {
        entry: forgeConfigSelf.entry,
        fileName: () => "[name].js",
        formats: ["cjs"]
      },
      rollupOptions: {
        external
      }
    },
    plugins: [vue(), pluginHotRestart("restart")],
    define,
    resolve: {
      // Load the Node.js entry.
      mainFields: ["module", "jsnext:main", "jsnext"]
    }
  };
  return mergeConfig(getBuildConfig(forgeEnv), config);
});
export {
  vite_main_config_default as default
};
//# sourceMappingURL=data:application/json;base64,
